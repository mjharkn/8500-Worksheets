---
title: 'Worksheet 5: Text Analysis'
author: 'Mandolyn Harkness'
date: ''
---

_This is the fifth in a series of worksheets for History 8500 at Clemson University. The goal of these worksheets is simple: practice, practice, practice. The worksheet introduces concepts and techniques and includes prompts for you to practice in this interactive document. When you are finished, you should change the author name (above), render your document to a pdf, and upload it to canvas. Don't forget to commit your changes as you go and push to github when you finish the worksheet._

Text analysis is an umbrella for a number of different methodologies. Generally speaking, it involves taking a set (or corpus) of textual sources, turning them into data that a computer can understand, and then running calculations and algorithms using that data. Typically, at its most basic level, that involves the counting of words.

**Text analysis can be broken down into 4 general steps:** 

  1. Acquiring a corpus
  2. Preparing the text or Pre-processing
  3. Choosing an analytical tool 
    * (There are many different tools or methods for text analysis. Take a minute and Google each of these methodologies: tf-idf, topic modeling, sentiment analysis, word vector analysis, n-grams)
  4. Analyzing the results
  
In this worksheet we are focusing on basic text analysis. We'll learn how to load textual data into R, how to prepare it, and then how to analyze it using tf-idf or term-frequency according to inverse document frequency. 

Before doing too much, lets load a few relevant libraries. The last few you will likely need to install.
```{r message=FALSE, warning=FALSE}
library(tidyverse)
library(tidytext) 
library(readtext)
library(widyr)
library(SnowballC)
```


## Acquiring a Corpus

First, lets install the State of the Union package. This package contains text of all the state of the Union addresses from Washington to Trump. Run `install.packages` to install the `sotu` package. 
```{r}
library(sotu)
```

This package includes both the metadata about these speeches in `sotu_meta` and the texts themselves in `sotu_texts`. Lets first look at the metadata associated with this package. 

```{r}
meta <- as.data.frame(sotu_meta)
head(meta)
```

This package also includes a function that will let us write all of the files to disk. This is crucial but also an unusual step because when conducting text analysis in the real world, you will not have an R package filled with the data. Rather you will have to organize the metadata and load the files yourself. Writing these to the disk allows us to practice that step. 

```{r}
file_paths <- sotu_dir(dir = "sotu_files")
head(file_paths)
```

What this does is create a new directory (sotu_files) and adds each State of the Union address as a text file. Notice each speech is its own .txt file that is comprised of just the text of the speech.

(@) Take a look at the directory in your files pane and open one of the documents. 


Now lets load all these texts into R using the `readtext()` function. First look up the documentation for this function and read about it. 
```{r}
sotu_texts <- readtext(file_paths)
```

Take a look at sotu_texts now. Notice that we have two columns, one filled with the text, and one with a document id. 
```{r}
head(sotu_texts, n = 5)
```

Now our textual data is loaded into R but the textual data and the metadata are in two different data frames. Lets combine them. Note that this isn't the way I would typically recommend doing this but its a quirk of the SOTU data. Typically when I create a metadata spreadsheet for a textual dataset I have a column for the file name which makes joining the textual data and metadata together easier. Here, we'll need to sort the dataset so that is alphabetical and then join the two together.

```{r}
sotu_whole <- 
  sotu_meta %>%  
  arrange(president) %>% # sort metadata
  bind_cols(sotu_texts) %>% # combine with texts
  as_tibble() # convert to tibble for better screen viewing

glimpse(sotu_whole)
```

Now our data is loaded into R and its ready to be pre-processed. 

## Pre-Processing 

### Tokenizing

One of the most basic pre-processing techniques for textual data is to tokenize it. Tokenization is essentially splitting a phrase, sentence, paragraph, or an entire text document into smaller units, such as individual words or terms. Each of these smaller units are called tokens. The tokens could be words, numbers or punctuation marks but, for historians, its common to remove the numbers and punctuation too. To do this we'll create a data frame where each row contains a single word with its metadata as unit of observation.

`tidytext` provides a function called `unnest_tokens().` We can use this to convert our sotu_whole data frame into one that is tokenized. It takes three arguments:
    
    * a tibble or data frame which contains the text
    * the name of the newly created column that will contain the tokens
    * the name of the column within the data frame which contains the text to be tokenized

```{r}
tidy_sotu <- sotu_whole %>%
  unnest_tokens(word, text)

tidy_sotu
```

`unnest_tokens()` also did something else that is really important: it made everything lowercase and took out all punctuation. The function contains options if we wanted to keep those elements, but for our purposes we don't. 

The function `unnest_tokens()` also has an option called token. Tokenizing by word is the default but you could also tokenize by characters, ngrams, lines, or sentences. 

(@)Use the documentation to tokenize the dataset into sentences: 
```{r}
sotu_sentences <- sotu_whole %>%
  unnest_tokens(sentece, text, token = "sentences")
```

We've talked about n-grams loosely in class. But lets define it more formally. An n-gram is a contiguous sequence of n items from a given sample of text or speech. The n stands for the number of items. So for example, a bi-gram is sets of two words. 

For example, if I had the string: "Nothing to fear but fear itself" A bi-gram would look like this: 
  Nothing to, to fear, fear but, but fear, fear itself.

A tri-gram would look like this: 
  Nothing to fear, to fear but, but fear itself
  
We can use unnest_tokens() to create n-grams for us. To do that we just have to add an extra option that defines n. 
```{r}
sotu_bigrams <- sotu_whole %>%
  unnest_tokens(bigram, text, token = "ngrams", n = 2)

head(sotu_bigrams$bigram)
```

(@) Use `unest_tokens()` to create tri-grams. 
```{r}
sotu_trigrams <- sotu_whole %>%
  unnest_tokens(trigram, text, token = "ngrams", n = 3)

head(sotu_trigrams$trigram)
```

### Stopwords

Another crucial component of text analysis is removing stopwords. Stopwords are words like "I, he, she, of, the" that are common and don't convey meaning. Because they are highly common they don't tell us anything about the content of the text itself. 

There are stopwords that come with the `tidytext` package. 
```{r}
stop_words
```
This is just one example of stopwords. You can find other lists such as stopwords in other languages or [stopwords designed specifically for the 19th century.](https://www.matthewjockers.net/macroanalysisbook/expanded-stopwords-list/) Its also possible you may want to edit the list of stopwords to include some of your own. For example, if we wanted to add the word, "America" to the stopwords list we could use add_row to do so: 

```{r}
stop_words_custom <- stop_words %>% add_row(word="America", lexicon="NA")
```


For now lets just remove the default stopwords. The easiest way to do that here is to do an anti-join. We join and return all rows from our table of tokens tidy_sotu where there are no matching values in our list of stopwords.

```{r}
tidy_sotu_words <- tidy_sotu %>% 
  anti_join(stop_words)

tidy_sotu_words

#another way to do this would be to filter by words NOT in the stop word list like this:  filter(!word %in% stop_words$word)
```

### Stemming 

The third common kind of pre-process is called word stemming. This process reduces a word to its root stem. So for example: fishing becomes fish, fished becomes fish, fishes becomes fish. You can easily see how this might be useful for capturing all forms of a word.

`tidytext` doesn't have its own word stemming function. Instead we have to rely on the functions provided by `hunspell` or `SnowballC`. I prefer `SnowballC`. You may need to install it before running the below code. 

```{r}
library(SnowballC)
tidy_sotu_words %>%
        mutate(word_stem = wordStem(word))

head(tidy_sotu_words)
```

Now if you compare the word and word_stem columns you can see the effect that wordStem had. Notice that it works well in cases like 
  
  citizens = citizen 

But it does some odd things to words like representatives. Whether this is useful for you will depend on the question your asking (and the OCR accuracy) but its a useful technique to be familiar with nevertheless. 

## Analysis

Lets reset our work space and ensure that our df is loaded with single tokenized words and filter by our stopword list. Go ahead and clear your environment by running `rm(list=ls())` in the console. Then run the below code. This code is simply everything we've run up to this point. 

```{r}
meta <- as.data.frame(sotu_meta)
file_paths <- sotu_dir(dir = "sotu_files")
sotu_texts <- readtext(file_paths)
sotu_whole <- 
  sotu_meta %>%  
  arrange(president) %>% # sort metadata
  bind_cols(sotu_texts) %>% # combine with texts
  as_tibble() 

tidy_sotu <- sotu_whole %>%
  unnest_tokens(word, text) %>% 
  anti_join(stop_words)
```
(@) Before we move forward, take a minute a describe the chunk of code you just ran. What does each section do and how does it reflect the workflow for a topic modeling project? What are the important steps that are unique to topic modeling? 

> The first section of the code is making a dataframe of the sotu meta data; then, we make a directory of the file paths so they can be read by the readtext() function. In the next step, we read the text in the files and the output into the sotu_texts dataframe in the "text" column. We're then creating a separate dataframe of the meta data that we got from the csv and stored in the meta dataframe. This is because it is necessary for us to not only know the document id and have all of the text, but also have the information on the president, dates, etc so we can perform historical analysis on the data. We are then taking the sotu metadata and sorting it by president so we can group relevent texts together which makes analysis of the dataframe easier. Next, we combine the organized metadata with our sotu_texts dataframe. This makes it so that the actual text of the speech/address is next to the relevent president and all of its metadata. Next, we are tokenizing words from the text so that we can see which words are associated with each president's addresses—this allows us to ask historical questions about why certain presidents are using certain words. An important aspect of this code is that we are filtering out the stopwords so that it contains only unique words, making it much more useful for analysis. Creating this dataframe also prepares our sotu texts for analysis via tf-idf because we can now calculate the frequency of each individual word, which we wouldn't have been able to do without the creation of this dataframe (tidy_sotu).

The most basic kind of analysis we might be interested in doing is counting words. We can do that easily using the `count()` function: 
```{r}
tidy_sotu %>%
  count(word, sort = TRUE)
```

Now we know that the most used word in state of the union speeches is government. But what if we wanted to look at when presidents use the words war versus the word peace?
```{r}
tidy_sotu %>%
  filter(word %in% c("war", "peace")) %>% 
  count(year, word)
```

This data frame is too big to understand quickly without visualizing it. We can create a bar chart to better understand it: 
```{r}
library(ggplot2)

tidy_sotu %>%
  filter(word %in% c("war", "peace")) %>% 
  count(year, word) %>% 
  ggplot(aes(year, n, fill = word)) +
    geom_col(position = "fill")

```

We also might want to ask about the average length of each president's state of the union address. Who had the longest speech and who had the shortest?
```{r}
sotu.length <- tidy_sotu %>%
  count(president, doc_id)  %>% 
  group_by(president) %>% 
  summarize(avg_words = mean(n)) %>% 
  arrange(desc(avg_words))
```

(@) Think back to the metadata that we loaded about these speeches. Why are the STOU addresses for more modern president's shorter than others? (For example Bush vs Teddy Roosevelt)

> Not all of them are speeches, many are also written out addresses. This may result in differences in the words use because of how they are employed differently in a written document vs. speaking them aloud.

(@) Filter the dataset to address this discrepancy and the recreate these statistics: 
```{r}
sotu_written <- tidy_sotu %>%
  filter(sotu_type == "written") %>%
  count(president, doc_id) %>%
  group_by(president) %>%
  summarize(avg_words = mean(n)) %>%
  arrange(desc(avg_words)) 
 
 sotu_speech <- tidy_sotu %>%
  filter(sotu_type == "speech") %>%
  count(president, doc_id) %>%
  group_by(president) %>%
  summarize(avg_words = mean(n)) %>%
  arrange(desc(avg_words)) 
```

### Term Frequency
Often, the raw frequency of a term is not as useful as relative frequency. In other words, how often that word appears relative to the total number of words in a text. This ratio is called **term frequency**. 

You can calculate the term frequency by dividing the total occurrences of a word by the total number of words. Typically you want to do this per document.

Here's an easy way to calculate it: 
```{r}
tidy_sotu_rel.freq <- tidy_sotu %>%
  count(doc_id, word, sort = T)  %>%# count occurrence of word and sort descending
  group_by(doc_id) %>% 
  mutate(n_tot = sum(n), # count total number of words per doc
         term_freq = n/n_tot)
```

We can assume that words with a high frequency in the text are more important or significant. Here we can find the words with the most significance for each president: 
```{r}
tidy_sotu %>%
  count(president, word)  %>%  # count n for each word
  group_by(president) %>% 
  mutate(n_tot = sum(n), # count total number of words per doc
         term_freq = n/n_tot) %>% 
  arrange(desc(term_freq)) %>% # sort by term frequency
  top_n(1) %>%  # take the top for each president
  print(n = Inf) # print all rows
```
(@) The code above is commented to help you follow it. Walk through the code above, and explain what each line does in your own words. If its a function you are unfamiliar with, look up the documentation.

> I am going to copy the code in my explanation this time just so it is clearer which lines I'm talking about:

tidy_sotu %>% # Here, we're taking the tidy_sotu dataset since it is already primed for further analysis

  count(president, word)  %>%  # We are counting the total number of words per document; this is important so that we can get the term frequency for each document rather than another variable (like president or type) so we can make our analysis more specific.

  group_by(president) %>% # Grouping by president so that we can perform a mutate on the sorted data.

  mutate(n_tot = sum(n),
         term_freq = n/n_tot) %>% # Adding another column that gets the term frequency per document by getting the total word count (via sum(n)). We then add a second column for term_freq, which we calculate by taking the n_tot column (total number of words) and then using it to divide the occurences of each specific word we have in the tidy_sotu dataset. This results in the term_freq being calculated and a new column is added that tells us what that term_freq is.

  arrange(desc(term_freq)) %>% # Sorting by term frequency so that it is easier to compare each one (from highest to lowest).

  top_n(1) %>%  # Making it so that we see the top term_freq for every president. We now see the president, their top word, the times it occurs in their speech, the times it occurs in total, and then the calculated term frequency.

  print(n = Inf) # Prints the rows and makes them visible and ready for tech analysis.

### TF-IDF

The above measures the frequency of terms within individual documents. But what if we know about words that seem more important based on the contents of the **entire** corpus? That is where tf-idf or term-frequency according to inverse document frequency comes in. 

Tf-idf measures how important a word is within a corpus by scaling term frequency per document according to the inverse of the term’s document frequency (number of documents within the corpus in which the term appears divided by the number of documents). The tf–idf value increases proportionally to the number of times a word appears in the document and is offset by the number of documents in the corpus that contain the word, which helps to adjust for the fact that some words appear more frequently in general. 

Don't worry too much about how tf-idf is calculated. But if you feel like you are a bit lost and want to understand the specifics - I recommend reading the [tf-idf wikipedia page](https://en.wikipedia.org/wiki/Tf%E2%80%93idf) and this blog post from [_Learn Data Science_](https://www.learndatasci.com/glossary/tf-idf-term-frequency-inverse-document-frequency/).

We'll calculate tf-idf in the next code chunk but lets talk for a second about what that number will represent. It will be: 

    * lower for words that appear frequently in many documents of the corpus, and lowest when the word occurs in virtually all documents.
    * higher for words that appear frequently in just a few documents of the corpus, this lending high discriminatory power to those few documents.

Luckily, `tidytext` provides a function for calculating tf-idf. To calculate tf-idf the function needs a list of every word in every document and the count. Like this: 
```{r}
tidy_sotu %>%
  count(doc_id, word, sort = TRUE)  
```
We can feed that to the function and get the tf-idf: 
```{r}
sotu.tf.idf <- tidy_sotu %>%
  count(doc_id, word, sort = TRUE)  %>%  
  bind_tf_idf(word, doc_id, n) 

head(sotu.tf.idf)
```

The resulting data frame has 3 columns: term frequency (tf), inverse document frequency (idf) and Tf-idf (tf_idf).

Lets look at what the words with the highest tf-idf score are. 
```{r}
sotu.tf.idf %>% arrange(desc(tf_idf))
```

(@) Pick a president who served more than one term. Filter the dataset and generate both raw word counts and tf-idf scores for that president. What words are most significant in each method? Why and what does that tell you about that president and their administration?  

```{r}
fdr_tfidf <- tidy_sotu %>%
  filter(president == "Franklin D. Roosevelt") %>%
    count(doc_id, word, sort = TRUE) %>%
      bind_tf_idf(doc_id, word, n)  %>%
      arrange(desc(tf_idf))

head(fdr_tfidf)

```

> Looking at the tf_idf score for FDR's words, there are some historical observations we can make when looking at the year the speech was written/given. One of the most obvious observations we can see is differces in tdif scores based on the era of his presidency. So, during the 30s when the Great Depression was in full swing, we see a higher frequency of words like exploitation, readjustment, debts, balances, suffered, economics, etc. This tells us his primary concern was the economy, assessing it, and repairing it. 

As we look at documents from the 40s, we see a clear shift in the language being commonly used. Words like deceit, dictator, disrupted, aircraft, british, threatened, etc. This shows us FDR's primary concern has shifted to focusing on America's involvement in WW2.

This observation tells us not only that FDR's focus shifted rather drastically, and we can see the effects of these major historical events and the language he uses to communicate them— very intense language to emphasize to the American people that these two crises must be solved for America to heal and prosper.

### Co-Occurance
Co-occurrence gives us a sense of words that appear in the same text, but not necessarily next to each other. It shows words that are likely to co-occur. Note that this is different than topic modeling, which we'll discuss next week. 

For this section we will make use of the `widyr` package. The function which helps us do this is the `pairwise_count()` function. It lets us count common pairs of words co-appearing within the same speech. This function might take a second as the resulting data frame will be incredibly large.

```{r}
sotu_word_pairs <- sotu_whole %>% 
  mutate(speech_end = word(text, -5000, end = -1)) %>%  # extract last 100 words
  unnest_tokens(word, speech_end) %>%   # tokenize
  filter(!word %in% stop_words$word) %>%  # remove stopwords
  pairwise_count(word, doc_id, sort = TRUE, upper = FALSE) # don't include upper triangle of matrix

head(sotu_word_pairs)
```

Now we have a list of words that appear near each other in the text as well as the frequency. Once again this dataset is far too large to look at in a data frame. Instead, we'll create a network graph that shows us the relationships between words for any words that appear more than 200 times. I chose 200 after looking at the above dataset and seeing that the highest count was 239. You want the network graph to be manageable and not too large. 
```{r}
library(igraph)
library(ggraph)

sotu_word_pairs %>% 
  filter(n >= 200) %>%  # only word pairs that occur 200 or more times
  graph_from_data_frame() %>% #convert to graph
  ggraph(layout = "fr") + # place nodes according to the force-directed algorithm of Fruchterman and Reingold
  geom_edge_link(aes(edge_alpha = n, edge_width = n), edge_colour = "tomato") +
  geom_node_point(size = 5) +
  geom_node_text(aes(label = name), repel = TRUE, 
                 point.padding = unit(0.2, "lines")) +
  theme_void()
```
(@) Create a network graph that shows the relationship between words that appear between 125 and 175 times.
```{r}
sotu_word_pairs  %>% filter(n >= 125 & n <= 175) %>%
  graph_from_data_frame() %>%
  ggraph(layout = "fr") +
  geom_edge_link(aes(edge_alpha = n, edge_width = n), edge_colour = "tomato") +
  geom_node_point(size = 5) +
  geom_node_text(aes(label = name), repel = TRUE,
    point.padding = unit(0.2, "lines"), max.overlaps = 100) +
      theme_void()

# When I ran this, there were a lot of overlapping lines and it suggested I add max.overlaps, but I really cannot notice a difference when I change it, and I tested some different numbers (bigger and smaller) and didn't see much of a difference.
```

## Analyzing Historical Journals

In the github repository below I have included the text and metadata for a journal called _Mind and Body_ which ran from the 1890s until the late 1930s and chronicled the development of the physical education profession. This profession paralleled many important developments in American history through the Progressive Era, World War I, the 1920s, and finally the Great Depression. This dataset was OCR'd from copies stored in Google Books. Using the metadata provided and the raw text files can you use what you learned above to analyze these texts? What historical conclusions might you be able to draw?

Note that when you are loading text from a file the process is slightly different. Above we were loading text from a R package which necessitates a different approach and is not something you would do frequently in practice. The readtext function takes a directory of text files and loads them into a dataframe. We also load a metadata file separately. You will need to join those two dataframes together to make use of the information in the metadata file. 
```{r}
#| eval: false
#zip file of all the .txt files. One for each issue. 
download.file("https://github.com/regan008/8510-TextAnalysisData/raw/refs/heads/main/MindAndBody.zip", "MindAndBody.zip")
unzip("MindAndBody.zip")

# Metadata that includes info about each issue.
metadata <- read.csv("https://raw.githubusercontent.com/regan008/8510-TextAnalysisData/main/mb-metadata.csv")

mb <- readtext(paste(getwd(), "/txt/*.txt", sep=""))
```

(@) Add code chunks below and intersperse text to explain what you are doing and why.

```{r}
mb_whole <- metadata %>% 
arrange(Year) %>% 
bind_cols(mb) %>% 
as_tibble()

# Combining the text with the metadata so everything is together.

head(mb_whole)
```

> Since this dataset covers several different eras, I am interested in separating them and then looking at the term frequency for words in these different eras to see if it can give us any insight into how the historical events going on in each period was reflected in the texts. So, I will be dividing the datasets into different eras using the filter function.

```{r}
mb_progressive <- mb_whole %>%
  filter(Year >= 1895 & Year < 1920)

mb_prog_tfidf <- mb_progressive %>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
count(Year, word, sort = TRUE) %>%
bind_tf_idf(word, Year, n) %>%
arrange(desc(tf_idf))

head(mb_prog_tfidf)
```

> Here, I have filtered the md texts so that it only shows those from the progressive era. I am also tokenizing everything. 

> Some words occuring fairly frequently are parry, disengage, raquet, backward, forward, etc. Fencing is a topic that comes to mind when I look at these words.

```{r}
mb_ww1 <- mb_whole %>%
  filter(Year >= 1914 & Year <= 1918)

mb_ww1_tfidf <- mb_ww1 %>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
count(Year, word, sort = TRUE) %>%
bind_tf_idf(word, Year, n) %>%
arrange(desc(tf_idf))

head(mb_ww1_tfidf)
```

> Here I'm filtering so it is only from the WWI era. Some words occuring here that aren't as common in the previous dataset are forcible, intuition, unfitness, calories, deutsche, italian, etc. There seems to be more internationally related discussion happening, along with a greater focus on the physical health of the body, worrying about weight, etc.

```{r}
mb_20s <- mb_whole %>%
  filter(Year >= 1920 & Year <= 1929)

mb_20s_tfidf <- mb_20s %>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
count(Year, word, sort = TRUE) %>%
bind_tf_idf(word, Year, n) %>%
arrange(desc(tf_idf))

head(mb_20s_tfidf)
```

> Here, I'm sorting so we only see text from issues published during the 20s. Some words of note here are sewage, ozone, ringworm, uterus, abortion, menstruatiion, etc. There seems to be more focus on the body and the outside things that are having an effect (potentially a negative one) on the body.

```{r}
mb_depression <- mb_whole %>%
  filter(Year >= 1930)

mb_depression_tfidf <- mb_depression %>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
count(Year, word, sort = TRUE) %>%
bind_tf_idf(word, Year, n) %>%
arrange(desc(tf_idf))

head(mb_depression_tfidf)
```

> Here I am sorting so we only have issues from the depression. Some words we see here that are unique are nicotine, asbestos, smoker, cigarette, lungs, etc.

>> We can now draw some historical conclusions we can draw from the words in this dataset and their tdifs. Based on the observations I made earlier in this script about the unique words occuring during issues from different time frames specific to an historical era, we see that major outside events and movements are changing how people are talking about wellness and recreation. During the progressive era there is a big focus on recreation, especially activities like fencing. From there, we move to the WWI era and there are more militaristic terms being used, which shows me that the war is resulting in a greater interest in regimented activities and exercising. There also is mention of nutrition and calories, perhaps due to rationing during the war. We shift back to more recreational activities in the roaring twenties, but there is also an increased interest in women's health. Furthermore, it seems that outside factors and their potential negative effects on health are being considered more, such as the ozone, sewage management, and ringworm. Considering the Spanish flu pandemic, I feel that this may have caused a shift in wellness magazines being interested in protecting oneself from the harmful effects of the environment around them. This only becomes more prevelent when we move to the depression, where cigarettes and smoking seem to be a big issue. There is a shift towards focusing on personal health rather than recreational activities. I see this shift as potentially reflecting the attitudes of Americans during the depression, as people may have been turning towards unhealthy habits to cope, perhaps, and a subsequent encouragement to focus on preserving ones personal physical health in trying times, where many are not getting proper nutrition.

(@) Choose one of the datasets from this repository or use one of your own: https://github.com/regan008/8510-TextAnalysisData. Note that there are both zip files with .txt files as well as separate metadata files for each publication in this repo. 

Write a text analysis script that explores and asks questions of the texts. At the end write a summary that analyzes the results you found. Be sure to rely on your historical knowledge. What can we learn from applying the strategies you've learned in this worksheet to analyze these documents?

> I chose to perform text analysis on the Women's Citizen magazines which include entries from June, July, and August of 1918.

> First, I am going to prepare the data.

```{r}
download.file("https://github.com/regan008/8510-TextAnalysisData/raw/423e2ec8c0f82b865cdfd09ef0a8ddead51d7292/TheWomanCitizen.zip", "TheWomanCitizen.zip")
unzip("TheWomanCitizen.zip")

metadata <- read.csv("https://github.com/regan008/8510-TextAnalysisData/raw/423e2ec8c0f82b865cdfd09ef0a8ddead51d7292/WomanCitizenMetadata.csv")

wc <- readtext(paste(getwd(), "TheWomanCitizen/*.txt", sep = "/"))

# Downloading all the files and then creating data frames in my environment.
```

```{r}
wc_whole <- metadata %>%
arrange(month) %>%
bind_cols(wc) %>%
as_tibble()

# Combining both datasets to create an entire one with the text and the metadata.
```

```{r}
tidy_wc <- wc_whole %>%
  unnest_tokens(word, text) # tokenizing the data
```


```{r}
tidy_wc_words <- tidy_wc %>%  anti_join(stop_words)

tidy_wc_words <- tidy_wc_words %>% filter(!grepl("[0-9]", word)) # removing stopwords and numbers, decreasing the size of the dataframe.

stop_words_custom <- stop_words %>% add_row(word="women", lexicon="NA") %>% add_row(word="woman", lexicon="NA") %>% add_row(word="avenue") %>% add_row(word="citizen") %>% add_row(word="individual") %>% add_row(word="cents") # I went back and added the words cent too because I noticed it was occuring a lot and I didn't really see its relevance, so I thought it may be an issue with the OCR.

tidy_wc_words <- tidy_wc_words %>%
  anti_join(stop_words_custom)
  # I did this because I noticed that woman and women were the most common words, which they obviously would be since it is the "Woman Citizen"
```

```{r}
tidy_wc_words %>%
 mutate(word_stem = wordStem(word)) #getting word stems
```

> Now that my words are prepped for analysis, I am first going to ask what was the primary concern of this magazine? Obviously we can tell from the title that it is concerned with women and their role as American citizens, but what is its main focus? I am just going to do a basic word count to answer this broadly.

```{r}
tidy_wc_words %>%
  count(word, sort = TRUE)
```

> Getting the word count shows us that suffrage, war, citizen, york, amendment, national, time, vote, united, and association are the top ten words. This tells us that the women's citizen magazine during this time was discussing women's rights relating to government, particularly the right to vote. This is pretty basic and just gives us a general idea of what the magazine is about. It also lines up with the historical context, given that the 19th amendment would be passed about a year later following the women's suffrage movement.

> Now that we have an idea on common issues for these magazines, I am interested in looking at whether or not these concerns shifted based on the month the magazine was published. I am going to answer this by first looking at the term frequency in each month.


```{r}
wc_tf_month <- tidy_wc_words %>%
count(month, word, sort = TRUE) %>%
group_by(month) %>%
mutate(total_words = sum(n), term_frequency = n / total_words) %>%
slice_max(n, n = 10) # Getting only the top ten words for each month
ungroup() %>% arrange(month)

head(wc_tf_month)
```

```{r}
ggplot(wc_tf_month, aes(x = reorder(word, -n), y = n, fill = month)) +
geom_col(show.legend = FALSE) +
facet_wrap(~month, scales = "free_y") + 
theme_minimal() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

> Looking at this, it seems that there really wasn't a large shift in topics from month to month. Given that these magazines only span three months, this is not surprising. What is interesting, however, is that war remains one of the top terms throughout all three months. Given that America was still in WWI at the time these were published, this makes sense. It also tells us that this magazine, and perhaps the women's suffrage movement as a whole, was concerned with the war and connected it to their right to vote.

> Since there didn't seem to be much of a difference between common terms for each month, I want to find out what terms are unique to each month's publications. I will do this by getting the tf-idf scores for each month.

```{r}
wc_monthly_tfidf <- tidy_wc_words %>%
count(month, word, sort = TRUE) %>%
bind_tf_idf(word, month, n) %>%
arrange(desc(tf_idf))

head(wc_monthly_tfidf)
```

> Now that I have the monthly tfidf scores, I want to first narrow it down to a smaller number (I'll do the top ten).

```{r}
wc_top_tfidf <- wc_monthly_tfidf %>%
group_by(month) %>%
filter(rank(desc(tf_idf)) <= 10) %>% # Getting the top ten words based on the tdif score for each month.
ungroup() %>% arrange(month)

head(wc_top_tfidf)
``` 

> Now, I want to get a visualization in the form of a bar graph. 

```{r}
ggplot(wc_top_tfidf, aes(x = reorder(word, tf_idf), y = tf_idf, fill = month)) +
geom_col(show.legend = FALSE) + 
facet_wrap(~month, scales = "free_y") +
theme_minimal() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

> Looking at the tdif scores gives us some idea of how the magazines shifted focus based on month. Honestly, some of these are hard for me to decipher and actually reading the magazine would be necessary. In June and July, there seems to be more focus on international affairs, with Hawaii and India being unique words. July seems to have more discussion of the federal government, with unique words being republicans, democrats, commerce, and qualifications. August is the most difficult for me to decipher, because it seems that there is a focus on people, with names like Jake, Jinnie, and Tiffany being unique, along with familial words like uncle and aunt. This shows me that issues during this month were focusing perhaps on individual stories, whereas the previous two months were more focused on international affairs and the federal government. 

> Historically, I think that this shows us that the women's suffrage movement was not solely interested in simply earning the right to vote, but was also aiming to have women be invovled in politics, having a say in both national and  international affairs.

> Next, I am interested in seeing how these women are discussing suffrage. How are they encouraging women to earn suffrage? To do this, I want to get wordpairs for words associated with "suffrage". I feel that this is a better, more narrow question because there are too many word pairs. I am choosing the word suffrage because I know that it is one of the most common words in the magazines and seems to be the main focus of this publication.

```{r}
wc_suffrage_pairs <- wc_whole %>%
  unnest_tokens(word, text) %>%  
  filter(!word %in% stop_words_custom$word) %>% 
  filter(!grepl("[0-9]", word)) %>%
  pairwise_count(word, doc_id, sort = TRUE) %>%
  filter(item1 == "suffrage" | item2 == "suffrage") # I am filtering here so that I only see wordpairs associated with suffrage.

  # I am getting word pairs here. I am filtering out numbers as well.
```

> There are a bit too many word pairs here to form any meaningful analysis, so I am going to limit it to ones that only occur 10 or more times.

```{r}
wc_pairs_filtered <- wc_pairs %>% 
filter(n >= 10) %>% # Filtering here so that the amount of words I am going to plot is more manageable.
slice_max(n, n = 5) # Keeping only the top 5 pairs so that the visualization is more managable.


wc_pairs_filtered
```


> Although this amount is more manageable, it is still way too much to analyze without some sort of visual aid, so I am going to create a network graph to provide that visualization.

```{r}
wc_pairs_filtered %>%
  graph_from_data_frame() %>%  
  ggraph(layout = "fr") + 
  geom_edge_link(aes(edge_alpha = n, edge_width = n), edge_colour = "tomato") + 
  geom_node_point(size = 5) + 
  geom_node_text(aes(label = name), repel = TRUE, point.padding = unit(0.2, "lines")) +
  theme_void() 
```

> Some interesting words we see here associated with suffrage are writing, journal, book, and published. These tell me that these magazines may have been encouraging the promotion of suffrage through writing and publishing journals, books, pamphlets, etc. 

Furthermore, another word I find interesting as a common pair with suffrage is "white". This tells me that this magazine was directed towards a white audience, and likely did not advocate for the voting rights of black women. This informs us of a broader historical issue with the women's suffrage movement during the early 20th century— it was limited to white women.

>> Conclusions

Via text analysis of The Women's Citizen magazines, we have made several observations: the primary concern of this publication (suffrage), the secondary concern (war), that discussions of international affairs and the federal government were common, that suffrage was encouraged to be promoted by women through not just protests, but writings and publications, and, finally, that this publication was made for white women only. These conclusions reveal not only tell us about this publication, but offer insight into the 
women's suffrage movement as a whole, its motivations, and its actions. 
