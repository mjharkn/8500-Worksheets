---
title: 'Worksheet 4: Data Visualization'
author: "Mandolyn Harkness"
date: "03-31-2025"
---

_This is the fourth in a series of worksheets for History 8500 at Clemson University. The goal of these worksheets is simple: practice, practice, practice. The worksheet introduces concepts and techniques and includes prompts for you to practice in this interactive document. When you are finished, you should change the author name (above), render your document to a pdf, and upload it to canvas. Don't forget to commit your changes as you go and push to github when you finish the worksheet._

## Charts and Graphs with `ggplot2()`

An essential element of working with data is trying to make sense of it and communicate your findings. Frequently, the way to do that is through some kind of data visualization. This week we are going to think about how to represent information graphically. How can we highlight patterns and trends in data in a way that helps ourselves and our readers/users understand historical data?

R has many visualization packages but the most powerful of those is `ggplot()` which builds on the concept of a grammar of graphics. To quote Hadley Wickham, "A grammar of graphics is a tool that enables us to concisely describe the components of a graphic. Such a grammar allows us to move beyond named graphics (e.g., the `scatterplot`) and gain insight into the deep structure that underlies statistical graphics." In other words, `ggplot()` provides a set of tools to map data to visual elements on a plot, to specify the type of plot, and to control the fine details of how that plot will be displayed. 

What does that mean in practice? 

Any type of plot in R has 3 necessary layers. 

**1) Data:** A data frame with one or more variables, each one with one or more observations. 

**2) Aesthetic:** A mapping of one or more variables to one or more visual elements on the graph. For example, you could map a variable to the x-axis, another variable to the y-axis, and a categorical variable to color so that different categories get plotted with different colors.

**3) Geometry:** The type or shape of the visual elements on the graph. For example, this could be a point in the case of a scatter plot, a bar in the case of a bar plot, or a line in the case of a line plot.

Lets load all the libraries we'll use in this worksheet: 
```{r message=FALSE, warning=FALSE}
library(gapminder) #this is a dataset
library(ggplot2) 
library(tidyverse)
library(DigitalMethodsData)
```
To begin, we're going to use one of R's built in datasets. First lets take a look at the data: 
```{r}
data(gapminder)
```

(@) Take a look at the data. What can you say about it? 

> This dataset has six variables: country, continent, year, lifeExp, pop, and gdpPercap. It is sourted by country alphabetically. Some questions can be asked about this dataset, such as "is there a correlation between gdpPercap, population, and life expectancy?" There are also more specific historical questions about the dataset that could be asked, such as "What was going on in 1952 in Afghanistan that resulted in the life expectancy only being only around 28?"

This data includes variables for life exptenency and per capita GDP. Lets say we want to plot these two variables against each other for all country-years within the dataset. First we have to tell `ggplot()` what our data is. 
```{r}
p <- ggplot(data = gapminder)
```

What happened here? A new variable, `p` was created but we didn't get a plot yet. That is because we've told `ggplot` what data we're going to use but we haven't mapped anything to a plot yet. We need to tell `ggplot` what variables in the data should be represented by which visual elements in the plot. We also haven't told it what kind of plot we want. 

Mappings in `ggplot` are defined using the `aes()` function like this: 
```{r}
p <- ggplot(data = gapminder, mapping = aes(x = gdpPercap, y=lifeExp))
```

In this code we gave `ggplot()` two arguments instead of one - data and mapping. This tells ggplot that we want the data about GDP to be mapped to the x-axis and data about life expectancy on the y-axis. The `mapping = aes()` argument is **linking variables in our data to things you will see on the plot**.

There are numerous types of aesthetic mappings. x and y values are the most common and obvious but we could also define things like color, shape, size, and line type (solid vs dashed etc.)

We can view the plot that we've created by calling the variable that we stored our plot in, `p`. What we get is an empty plot. You'll notice that ggplot has created both the x and y-axis for us but there are not points on our plot. That is because we need to add a layer to the plot that includes the data. `geom_point()` helps us do that. It takes the x and y values and plots them in a scatterplot. 

```{r}
p + geom_point()
```

To summarize what we did above, there were 3 steps we went through. First, tell `ggplot()` what our data is. Second, add `mapping = aes()` to map our variables to the plot. And, third, choose a geom. In this case our geom was `geom_point()` which created the points/data layer on our plot. A fourth step could have included adding a scale, legend, title or some other element to the graph. These are typically referred to as labs. 

(@) Modify the above plot so that the variables it draws on are life expectancy and population. Then, use a comment to annotate the code and mark each of the 3 parts described above.
```{r}
p <- ggplot(data = gapminder) #Telling ggplot() what the data is.
  p <- ggplot(data = gapminder, mapping = aes(x = pop, y = lifeExp)) #Mapping variables to the plot. I changed x from gdpPercap to pop.
    p + geom_point() #Choosing a geom.

```

We can make this plot even more complex. Adding another value, color, to `aes()` we can change the color of each dot to correspond to a year. We also might want to rename the x and y-axis so that the labels have a more useful description of the variable. We can do so using the labs function. 

```{r}
ggplot(data = gapminder, mapping = aes(x = gdpPercap, y=lifeExp, color=year)) + geom_point() + labs(x="GDP Per Capita", y="Life Expectency in Years", title="Life Expectency and Per Capita GDP by Year") 
```

(@) Using the same plot above, can you edit the code to add a trend line? (Hint: You'll need to add another geom)
```{r}
ggplot(data = gapminder, mapping = aes(x = gdpPercap, y=lifeExp, color=year)) + geom_point() + geom_smooth() + labs(x="GDP Per Capita", y="Life Expectency in Years", title="Life Expectency and Per Capita GDP by Year") #added trend line with geo_smooth(), which I found out about through reading the assigned "Top 50 ggplot2 Visualizations"
```


(@) The file below contains data about the population of cities in 1930 and their recreation expenditures. Can you create a scatter plot from this data? 
```{r}
rec <- read.csv(file = "https://raw.githubusercontent.com/regan008/DigitalMethodsData/main/raw/Recreation-Expenditures.csv")

rec.plot <- ggplot(data = rec)
  rec.plot <- ggplot(data = rec, mapping = aes(x = total_expenditures, y = rec$population, color = state))
    rec.plot + geom_point() + labs(x = "Total Expenditures, USD", y = "Population")

```

The `geom_point()` function allows us to create scatterplots but its not the only geom within `ggplot2()`.

### Histogram 

A histogram is a graph used to represent the frequency distribution of a few data points of one variable. Histograms often classify data into various “bins” or “range groups” and count how many data points belong to each of those bins.

```{r}
recreational.data <- read.csv("https://raw.githubusercontent.com/regan008/DigitalMethodsData/main/raw/Recreation-Expenditures.csv")

ggplot(recreational.data, aes(x = population)) +
  geom_histogram()
```

(@) Use the Boston Women's voters dataset to create a histogram of the age of voters. 
```{r}
data(BostonWomenVoters)
bwv.data <- BostonWomenVoters

ggplot(bwv.data, aes(x = Age)) + geom_histogram()
```

(@) By default, `geom_histogram()` is choosing the number of bins. Can you change the number of bins or the bin width? (Hint: How might you look up the options for this function?)
```{r} 
ggplot(bwv.data, aes(x = Age)) + geom_histogram() + stat_bin(bins = 50) # Example of more bins having smaller intervals.
```
```{r}
ggplot(bwv.data, aes(x = Age)) + geom_histogram() + stat_bin(bins = 5) # Example of less bins resulting in larger intervals.
```

(@) Explain, what does changing the number of bins do? 

> Changing the number bins of bins displays the data in different ranges. So, having a higher number of bins results in the data on age being displayed in smaller intervals, whereas having a smaller number of bins results in larger intervals.

### Barplots 

A barplot (or barchart) is one of the most common types of graphic. Whereas a histogram shows the number of entries in each "bin" - a bar chart shows the relationship between a numeric and a categorical variable. Each entity in the categorical variable is represented as a bar. The size of the bar represents its numeric value. 

```{r}
sc.rec <- recreational.data %>% group_by(state) %>% summarize(state.expenditures = sum(total_expenditures))
ggplot(sc.rec, aes(x = state, y = state.expenditures )) +
  geom_col()
```

(@) Using the `gayguides` data, create a bar chart that shows the number of locations in 1980 in South Carolina, Georgia, and North Carolina. 
```{r}
southern.states.data <- gayguides %>%
  filter(state %in% c("SC", "GA", "NC") & Year == 1980)

gg.southernstates.1980 <- southern.states.data # I am not sure why (I may be doing something wrong or missing a step in the next lines), but it gives me an error about trying to supply a data frame if I skip this step. If I do this, though, it works.
```

```{r}
SouthernStates.1980 <- gg.southernstates.1980 %>%
  group_by(state) %>%
  summarize(num.locations = n()) 


SouthernStates.1980.plot <- ggplot(SouthernStates.1980, aes(x = state, y = num.locations)) +
      geom_col()

SouthernStates.1980.plot
```

(@) Using the `gayguides` data, plot the number of religious institutions in each state.

```{r}
# I didn't know for this if you meant ALL of the states in the gayguides database or SC, GA, and NC from the previous one, so I just did both. This is the one for all of the states:

gayguides.ri <- gayguides %>% filter(grepl("Religious", type))
  gg.ri.data <- gayguides.ri

State.ReligiousInstitutions <- gg.ri.data %>% 
  group_by(state) %>%
  summarize(num.locations = n())

State.ReligiousInstitutions.Plot <- ggplot(State.ReligiousInstitutions, aes(x = state, y = num.locations)) +
  geom_col()

State.ReligiousInstitutions.Plot

```

```{r}
# And here is the one for just SC, GA, and NC:

SouthernState.RI <- gg.ri.data %>%
  filter(state %in% c("SC", "GA", "NC")) %>% 
  group_by(state) %>%
  summarize(num.locations = n())

SouthernState.ReligiousInstitutions.Plot <- ggplot(SouthernState.RI, aes(x = state, y = num.locations)) +
  geom_col()

SouthernState.ReligiousInstitutions.Plot

```

(@) Formulate a question based on a dataset of your choice. That question should be something that would be appropriately answered by a bar chart. What is the question you want to explore?

< A question I could ask about the dataset of the number of religious in all of the gayguides states is: 
    "What is the correlating variable (or variables) to the number of religious institutions?" 
      You would need to make more datasets to answer this question, and it could also lead to historical questions such as "Why are California, Florida, and Texas the top 3 states with religious institutions?" and/or "Why do Idaho, Mississippi, and West Virginia have the least despite being fairly religious states?"

(@) Now write the code to answer that question and use comments (`#`) to explain your thinking as you go.
```{r}
# I have a feeling that the correlation is the amount of entries in each state. If we simply look at the number of entries for the states I asked the question about, we can determine whether or not this is true:

gg.filtered <- gayguides %>%
  group_by(state) %>%
  summarize(num.locations = n()) # Basically, I am filtering the gayguides data that it only includes the states I asked the question about. This is because I am interested in seeing if the correlation between the number of religious institutions and the number of institutions in general.

GG.Filtered.Plot <- ggplot(gg.filtered, aes(x = state, y = num.locations)) +
  geom_col() # Here, I am making a barplot so I can visualize the data.

GG.Filtered.Plot # Looking at this visualized data, it seems like there is a slight correlation between the amount of religious institutions to the amount of locations in all of the gayguides data, but it is not as strong as I thought it would be because there are cities with more locations in general than others that have comparitively less religious institutions, and vice versa. This tells me that it is perhaps a stronger correlation, or that the reason for the amount of religious institutions in each state is not represented in the dataset, and more outside research has to be done to answer the question fully.

```

### Line Charts

Line charts excel at demonstrating trends over time. 

```{r}
data(gayguides)
gg.byyear <- gayguides %>% group_by(Year) %>% summarize(count = n())
ggplot(gg.byyear, aes(x = Year, y = count)) +
  geom_line()
```

(@) Create a line chart that shows the number of religious institutions in the gay guides data over time.
```{r}
ReligiousInstitutions.OverTime <- gayguides.ri %>% group_by(Year) %>% summarize(count = n())
ggplot(ReligiousInstitutions.OverTime, aes(x = Year, y = count)) +
  geom_line()
```

(@) In the gayguides data, danger or risk is indicated in several different ways. Sometimes it through the use of an amenity categorization of (HOT) or (AYOR) which meant that these locations were frequented by police and should be used at your own risk. Other times, locations were listed as "inquire locally" in either the description or address field. There are many reasons a location would have requested to have been listed this way. Many times, it was due to harassment and the location deemed it too dangerous to publicly list its location. Can you create a subset of the gay guides data about risk and then use it to create a chart about the usage of these indicators over time? 
```{r}
gayguides.risk <- gayguides %>%
  filter(
    grepl("(HOT|AYOR)", amenityfeatures, ignore.case = TRUE) |
    grepl("inquire locally", description, ignore.case = TRUE) |
    grepl("inquire locally", streetaddress, ignore.case = TRUE)) %>% # Filtering so I have the appropriate locations.
  mutate(
    risk.indicator = case_when(
      grepl("HOT", amenityfeatures, ignore.case = TRUE) ~ "HOT",
      grepl("AYOR", amenityfeatures, ignore.case = TRUE) ~ "AYOR",
      grepl("inquire locally", description, ignore.case = TRUE) |
        grepl("inquire locally", streetaddress, ignore.case = TRUE) ~ "Inquire Locally"
    )
  ) %>%
  group_by(risk.indicator, Year) %>%
  summarize(count = n()) %>%
    group_by(Year) %>%
    summarize(count = n()) # I am grouping by and summarizing here twice so that I can get data on the number of risk indicators by year and then how many risk indicators appear in that year.
ggplot(gayguides.risk, aes(x = Year, y = count)) +
  geom_line() # Creates the line chart to visualize the data.
```


### Faceting
Unlike the previous exmaples, `facet_wrap` is not a geom.  It splits the chart window in several small parts (a grid), and displays a similar chart in each section. Each section usually shows the same graph for a specific group of the dataset. For example, remember the line chart above that graphed the number of locations in the `gayguides` data across each year? We can facet that by state to see the number of locations in each state in each year. 

```{r}
gg.byyear <- gayguides %>% filter(state == "SC" | state == "NC" | state == "GA") %>% group_by(state, Year) %>% summarize(count = n())

ggplot(gg.byyear, aes(x = Year, y = count)) +
  geom_line() + facet_wrap(~state)
```

(@) Using the state recreation data, can you create a chart that outlines the total expenditures in South Carolina by city?
```{r}
sc.rec.data <- recreational.data %>% filter(state == "SC") # Filtering data so it only has entries from SC. 
ggplot(sc.rec.data, aes(x = city, y = total_expenditures)) +
  geom_col() + facet_wrap(~population) # I just thought it would be interesting to facet by population here so we could see the population and how it may correlate to the total expenditures in each city.
```

(@) Using the gayguides data can you select 5 types of locations and chart the number of each type between 1965 and 1980? 
```{r}
gg.5types <- gayguides %>%
  filter(grepl("Bathhouses|Hotel|Cruising Areas|Restaurant|Book Store", type) & Year >= 1965 & Year <= 1980) %>%
  group_by(type, Year) %>%
  summarize(count = n())

ggplot(gg.5types, aes(x = Year, y = count)) +
  geom_line() + facet_wrap(~type)
```

(@) Using this recreation dataset from last week, can you find the average number of volunteer and paid workers over time? 
```{r}
rec.workers <- read.csv("https://raw.githubusercontent.com/regan008/DigitalMethodsData/main/raw/RecreationData-Wide.csv")

avg.recworkers <- rec.workers %>%
  pivot_longer(cols = starts_with("X"), names_to = "year", values_to = "num_workers") %>% filter(!is.na(num_workers)) %>%
  pivot_wider(names_from = type_of_worker, values_from = num_workers) %>%
  mutate(total.paid.workers = `male paid` + `female paid`, total.volunteers = `men volunteer` + `women volunteer`, year = as.numeric(str_remove(year, "X"))) %>% # Had to do this step to convert the year to a numeric and I had to google this to find out how to fix the issue I was getting (graph was blank because there was no numeric range).
  group_by(year) %>%
    summarize(avg.volunteers = mean(total.volunteers, na.rm = TRUE), avg.paid.workers = mean(total.paid.workers, na.rm = TRUE), count = n())

ggplot(avg.recworkers) + geom_line(aes(x = year, y = avg.volunteers)) + geom_line(aes(x = year, y = avg.paid.workers))

# I gotta fix this.

```

### Practice
In the slots below use the datasets for class (or a dataset of your choice) to create a plot. The plot you create in each of these three examples should try to make some kind of historical observation. After you finish creating the plot, write a short paragraph that explains what kind of observation you were trying to make and what your plot demonstrates. 

(@) Plot 1
```{r}
data(BostonWomenVoters) # What is the marital status of these women voters?

bwv.naturalization <- BostonWomenVoters %>%
  mutate(Marital.Status = case_when(
    grepl("^single", Court.of.Naturalization, ignore.case = TRUE) ~ "Single",
    grepl("^widow", Court.of.Naturalization, ignore.case = TRUE) ~ "Widowed",
    grepl("^married", Court.of.Naturalization, ignore.case = TRUE) ~ "Married"
  )) %>% # I found out how to do the "^" at the beginning of a string on stack overflow after googling how to utilize something similar to the start_with() function we sometimes use within filter().
  filter(!is.na(Marital.Status)) %>% # Accounting for missing/NA values since there are plenty in this dataset.
    group_by(Marital.Status) %>%
    summarize(count = n())
  
BWV.Marital.Status <- ggplot(bwv.naturalization, aes(x = Marital.Status, y = count)) + geom_col()

BWV.Marital.Status
```

(@) Plot 1 explanation: 
> For this plot, I wanted to make the historical observation of how many women of different marital statuses were registering to vote. To make this observation, I will be utilizing data in the Court.of.Naturalization column.

There are multiple variations of different observations in the Court.of.Naturalization column and many missing/NA values. To make this more tidy and able to answer our question, I mutated the dataset so that all the different variations of single, married, and widowed would be organized neatly into uniform observations in a new column that I think better describes the observation I am making— "Marital.Status". 

I chose to make a histogram because it seemed like the most fitting plot to visually make the observation since you can see the height of the bars compared to one another. The histogram shows that there are over twice as many single women compared to married women registering to vote, and there are even less widowed women. This results in the historical observation that more single women were registering to vote than women of other marital statuses during this time.

(@) Plot 2
```{r}
data(almshouse_admissions) # I am wondering if I can track the number of admissions over the years documented.

almshouse.years <- almshouse_admissions %>% group_by(Year.Admitted) %>% summarize(count = n())
ggplot(almshouse.years, aes(x = Year.Admitted, y = count)) +
  geom_line() + scale_x_continuous(limits = c(1790, 1810)) # I found out about the scale_x_continuous function on stack overflow when I looked up how to limit the year range on the x axis.

almshouse.years
```

(@) Plot 2 explanation: 
> I was interested in seeing the number of admissions over the years. I chose a line plot to visually observe this since it gives a good image of amount over time. This one was pretty straight forward to make, as I just grouped the data by year and summarized to get a count of the amount of admissions every year. 

When we look at the plot, it shows a sharp increase in admissions starting in 1800, although we do see some admissions in the 1790s. THere is also notably a decrease in admissions in 1802 until it spikes back up again in 1803. This tells us that more patients were being admitted to the almshouse in 1801 and 1803 than any of the other years documented. You could ask the historical question of what was going on with the institution during these years that resulted in these increases in admissions.

(@) Plot 3. For this one, try a different kind of plot. [Check out a useful gallery here.](https://github.com/regan008/DigitalMethodsData/blob/main/raw/RecreationData-Wide.csv)
(For this week, avoid choosing a map. We'll talk more about maps and geographic data over the next two weeks.)
```{r}
data(charlestonManumissions) # For this data, I am interested in making a historical observation on what the most common motives were for manumision.

manumissions.motives <- charlestonManumissions %>% 
  mutate(Motives = case_when(
    grepl("Moral", Motive) ~ "Moral",
    grepl("Financial", Motive) ~ "Financial",
    grepl("Foreign", Motive) ~ "Foreign",
    grepl("Sexual", Motive) ~ "Sexual",
    grepl("Outside Purchase", Motive) ~ "Outside Purchase",
    grepl("Restricted", Motive) ~ "Restricted",
    grepl("Self-Purchase", Motive) ~ "Self Purchase"
  )) %>%  
    group_by(Motives) %>%
    summarize(count = n())

ggplot(manumissions.motives, aes(x = "", y = count, fill = Motives)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
labs(fill = "Motives", x = NULL, y = NULL, title = "Motives for Manumission")

# Found all of the syntax for this on the 50 plots site from the syllabus.

```

(@) Plot 3 explanation: 
> I was curious here about observing and comparing the amount of motivations for manumission among formerly enslaved people. I wanted to use a different sort of chart than the ones we had previously used in this worksheet and I chose a pie chart since I think it does a good job at visualizing difference in volume.

I first had to mutate the data because there were entries that had multiple motives and I wanted to get a count of each individually, so I had to make a new column with appropriately separated observations. Then, I grouped by that new column and did a count with summarize to get the number of each occupation in this dataset. I then made a pie chart out of the data using syntax from the site I mentioned above. I wasn't sure about all of the settings, so I just followed the example of the code from the website and I think it worked fine.

Looking at the pie chart shows that the "moral" motive was the most common by far, with self purchase and outside purchase falling behind. It is likely that moral was combined with a fair amount of self and outside purchases, so I think it is important to keep that in mind. This leads to the historical question of what exactly was this "moral" motive referring to (would require outside research) and how does that help explain the volume of moral motives for manumission? 