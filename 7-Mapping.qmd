---
title: "Worksheet 7: Mapping"
author: "Mandolyn Harkness"
date: ""
---

_This is the seventh in a series of worksheets for History 8500 at Clemson University. The goal of these worksheets is simple: practice, practice, practice. The worksheet introduces concepts and techniques and includes prompts for you to practice in this interactive document. When you are finished, you should change the author name (above), render your document to a pdf, and upload it to canvas. Don't forget to commit your changes as you go and push to github when you finish the worksheet._

## Mapping with `ggmap()` and `ggplot2()`

There are many different mapping packages for R. That means there is no single way to create a map in R. Different packages have different strengths and weaknesses and your use of them will depend on your goals and the historical questions you would like to ask. If your project is highly map centric - it may be better suited to ArcGIS which we will not cover in this class. 

```{r message=FALSE, warning=FALSE}
library(ggplot2) 
library(tidyverse)
library(DigitalMethodsData)
library(ggmap)
library(tidygeocoder)
```

### Geocoding
The first step in any project is to create geographical data. Depending on the time period you study and the nature of the data, this may or may not be able to be automated. The process of associating geographical coordinates (latitude/longitude) with data is called **geocoding**. There are numerous avenues and services for performing this service. Google Maps and Open Street Maps are the two most common. These services accept an address and return latitude and longitude coordinates. Google Maps does require an API Key which you can sign up for. Typically geocoding with Google costs .5 cents per entry but when you sign up with them, you get $300 in credit per year (at least at the time of writing this - that may change). Although we geocode a very large amount of data with Google on Mapping the Gay Guides, I've never been charged for geocoding. 

However, for the purposes of this class we're going to use Open Street Map's geocoding API because it is open source and therefore free. 

To use the geocoding service, lets first load some data. We'll use the recreation data that we used last week. 
```{r}
rec.data <- read.csv("https://raw.githubusercontent.com/regan008/DigitalMethodsData/main/raw/Recreation-Expenditures.csv")
head(rec.data)
```
Notice in this dataset we have the city state and year but no geographical coordinates if we wanted to map this data. Even if we don't have an exact street address, we can still geocode this data to get coordinates. The function to do that is `geocode()` and we can pass it a city and street. Note the method option, which designates which geocoding service we want to use. 
```{r}
rec.data.coordinates <- rec.data %>% geocode(city = city, state = state, method='osm', lat = latitude, long = longitude)
head(rec.data.coordinates)
```
Now we have latitude and longitude coordinates for our data. 

(@) Use this approach to geocode the `UndergroundRR` data. 
```{r}
data("UndergroundRR")

urr.data.coordinates <- undergroundRR %>%
  geocode(city = City, state = State, method = 'osm', lat = latitude, long = longitude)
head(urr.data.coordinates) # I am noticing a good bit of 'invalid number' entries here for lat and long. Is that normal?
```


(@) Geocode the Boston Women Voters dataset. Note that the data does include street addresses but because they are broken into parts - street address number, street, etc - you'll need to combine them into a full address to pass to the geocoding function. 
```{r}
data("BostonWomenVoters")
library(dplyr)

bwv.data.coordinates <- BostonWomenVoters %>%
  mutate(Full.Address = paste(Street.of.Residence.on.April.1, Street.Number.on.April.1, State.or.Province.of.Birth, State.or.Province.of.Birth, Country.of.Birth, sep = ", ")) # Combining address columns.

bwv.data.coordinates <- bwv.data.coordinates %>%
  filter(Present.Residence == "Same") %>%
  filter(Court.of.Naturalization == "Single") # I decided to filter down this dataset to just women who have the same present residence as the one listed in April, and for it to only include single women. I did this because the dataset was far too large and it would have been geocoding for hours. I also think, from an historical perspective, it may be interesting to just map single women and see where they are living and if there are any sort of identifiable communities of single women. 

bwv.data.coordinates <- bwv.data.coordinates %>%
  geocode(address = Full.Address, method = 'osm', lat = latitude, long = longitude)

head(bwv.data.coordinates)
```

### Maps with `ggplot()`

Just like charts in ggplot, maps in ggplot are plotted using a variety of layers. To build a map we need to supply it with geographic data that can use to plot a base map. Your base map will differ depending on the scale of your data, the questions you are asking, and your area of study. For the purposes of this worksheet lets map the gay guides data. Typically you'd need to geocode this data first, but this data has already been geolocated for you. 

First we need to get a basemap. For this example we'll use the `map_data()` function which turns data from the `maps` package into a data frame that is suitable for plotting with ggplot. 

(@) Look at the documentation for `map_data()`. Which geographies does this package provide access to?

> This package provides access to the world (two types; the second has the Pacific Ocean in the center, the other does not), The United States (including separate functions for its states and counties), France, Italy, and New Zealand.

Lets load the base map data for the US. 
```{r}
usa <- map_data("state")
```

(@) `map_data()` generates a data frame. Take a look at this data frame, what types of data are included? 

> The data included are longitude, latitude, region, and subregion. It also seems to be grouping and ordering the data, though I am not 100% sure what that means. There are several long and lat data for every state.


We can now pass this data to ggplot to create a simple basemap. When we wanted to create a bar plot using `ggplot()` we called `geom_bar`. When we wanted to create a line chart we used `geom_point()` and `geom_line()`. The sample principle applies here and `ggplot()` provides a geom for maps.
```{r}
ggplot() + 
  geom_map( data = usa, map = usa, aes(long, lat, map_id=region))
```

Now we have a basemap! But what if we want to layer data onto it. Lets add all of the locations in `gayguides` from 1965. First we need to set up our data: 
```{r}
data(gayguides)
gayguides <- gayguides %>% filter(Year == 1965)
```

And then we can use the same mapping code from above but this time we're going to add an additional geom -- `geom_point()` which will point to each of our locations from 1965. 
```{r}
ggplot() + 
  geom_map(data = usa, map = usa, aes(long, lat, map_id=region), fill = "lightgray", color = "black") +
  geom_point(data = gayguides, mapping = aes(x = lon, y = lat), color = "red")
```

(@) This map looks slightly funny, but that is because the data includes entries outside of the contiguous United States. Try filtering out those entries and mapping this again. Can you change the color or size of the points? Can you add a title?
```{r}
gayguides <- gayguides %>%
  filter(state != "HI") # Filtered out just Hawaii because I didn't see any Alaskan locations.

ggplot() + 
  geom_map(data = usa, map = usa, aes(long, lat, map_id=region), fill = "lightgray", color = "black") +
  geom_point(data = gayguides, mapping = aes(x = lon, y = lat), color = "red")
```

(@) Can you map just locations in South Carolina (on a basemap of SC)? 
```{r}
sc_map <- usa %>% filter(region == "south carolina")
sc_gg <- gayguides %>% filter(state == "SC")
ggplot() +
  geom_map(data = sc_map, map = sc_map, aes(x = long, y = lat, map_id = region), fill = "lightblue", color = "black") +
  geom_point(data = sc_gg, mapping = aes(x = lon, y = lat), color = "red") +
  labs(title = "Gay Guides South Carolina") +
  theme_minimal()
```

(@) Create a map that uses your geocoded data from the Boston Women Voters dataset. 
```{r}
boston.map <- map_data("county") %>% filter(subregion == "suffolk") %>% filter(region == "massachusetts")

ggplot() +
   geom_map(data = boston.map, map = boston.map, aes(x = long, y = lat, map_id = region), fill = "lightblue", color = "black") +
  geom_point(data = bwv.data.coordinates, mapping = aes(x = longitude, y = latitude), color = "red") +
  labs(title = "Boston Women Voters") +
  theme_minimal() # The base map is not appearing here so I need to figure that out ...
```

Lets return to the recreational data for a minute.

```{r}
#| eval: false
head(rec.data.coordinates)
```
One interesting way to visualize this map might be to plot each location as a point on the map but to use the total_expenditures values to determine the size of the points. 

We can do that by making a small adjustment to the map we made previously. First lets recreate a basic map of all these locations using `ggplot()`
```{r}
ggplot() + 
  geom_map(data = usa, map = usa, aes(long, lat, map_id=region), fill = "lightgray", color = "black") +
  geom_point(data = rec.data.coordinates, mapping = aes(x=longitude, y=latitude))
```

```{r}
ggplot() + 
  geom_map( data = usa, map = usa, aes(long, lat, map_id=region), fill="white", color="gray") +
  geom_point(data = rec.data.coordinates, mapping = aes(x=longitude, y=latitude, size=total_expenditures))
```

---

```{r}
library(readr) #you may have to install it using `install.packages()`. 
library(sf)
library(ipumsr) #you may need to install this. If you are on a mac, it may give you warnings. Try loading it to verify installation worked. 
library(tidyverse)

#NHGIS data is stored in zip files. R has functions for dealing with these but we still need to download the file to our server. Here we're going to write a function that will create a new directory, download the data, and rename it. 
dir.create("data/", showWarnings = FALSE)
get_data <- function(x) {
  download.file("https://github.com/regan008/DigitalMethodsData/blob/main/raw/nhgis0005_shape_simplified.zip?raw=true", "data/nhgis_simplified_shape.zip")
  download.file("https://github.com/regan008/DigitalMethodsData/blob/main/raw/nhgis0005_csv.zip?raw=true", "data/nhgis_data.zip")
}

get_data()

# Change these filepaths to the filepaths of your downloaded extract
nhgis_csv_file <- "data/nhgis_data.zip"
nhgis_shp_file <- "data/nhgis_simplified_shape.zip"
# Shape file is a special type of file that has all of the boundaries that draw the countries. Shape files are complex because of coastlines; makes them very large

#load the shape file and then the data file into read_nhgis_sf
nhgis_shp <- read_ipums_sf(
  shape_file = nhgis_shp_file
)
nhgis_data <- read_nhgis(nhgis_csv_file)

#Use the ipums join file to join both the data and shape file together.
nhgis <- ipums_shape_full_join(nhgis_data, nhgis_shp, by = "GISJOIN")

#filter nhgis so that the map focuses on the 48 contiguous states. 
nhgis <- nhgis %>% filter(STATE != "Alaska Territory" & STATENAM != "Hawaii Territory")

#plot 
ggplot(data = nhgis, aes(fill = AZF001)) +
  geom_sf() 

```
(@) In the code above, why filter out Hawaii and Alaska? Try commenting out that line and rerunning the code. What happens? Why might we want to do this? Why might we not want to do this? How does it shape the interpretation?
> Filtering out Hawaii and Alaska makes the map more readable. # Come back to this #

This is a great start. But using AZF001 (Native born males) as the fill does not create a useful visualization. It doesn't give us a sense of the proportion of that data. There are multiple problems with the map as it is, but one is that the color scale makes this incredibly hard to read. We can fix that by using a scale to break the values of AZF001 into bins and assign each a color. R has a function for this. It comes from the scales pacakge which you may need to install.

```{r}
library(scales)
ggplot(data = nhgis, aes(fill = AZF001)) +
  geom_sf() + scale_fill_distiller(name="Native Born Males", palette = "Spectral" , breaks = pretty_breaks(n = 10))
```

This is now much more readable but the numbers represented are simply the raw population count. That may be fine depending on your question but what would be much better, is if we knew what percentage of the total population foreign born males represented. To get that we have to calculate it. The next few questions will walk build on the code above and walk you through doing this.

(@) First, create a variable called total_male_pop, with the total foreign and native born male population by summing the variables AZF001 and AZF003. 
```{r}
invalid_geometries <- st_is_valid(nhgis)
  nhgis <- nhgis %>% filter(invalid_geometries)


total_male_pop <- nhgis %>% 
  summarize(total_male_pop = sum(AZF001, AZF003, na.rm = TRUE))
```

(@) Now, use the total_male_pop variable and create a variable for the the percentage of foreign born males.
```{r}
percent_foreign_born_males <- nhgis %>%
  summarize(
    total_male_pop = sum(AZF001, AZF003, na.rm = TRUE),
    percent_foreign_born_males = (sum(AZF003, na.rm = TRUE) / total_male_pop) * 100
  )
```

(@) Now map your result. You'll want to replicate the code from the example above, but this time add another layer to the plot - a scale. Here we'll use this scale `scale_fill_continuous("", labels = scales::percent)`

Before you write that code, look up the documentation for the above code (and look at the examples). What does it do? 

>

Now create the map: 
```{r}
nhgis <- nhgis %>%
  mutate(
    total_male_pop = AZF001 + AZF003,
    percent_foreign_born_males = ifelse(total_male_pop > 0, (AZF003 / total_male_pop) * 100, 0)
  )

ggplot(data = nhgis, aes(fill = percent_foreign_born_males)) +
  geom_sf() +
  scale_fill_continuous("", labels = scales::percent) # I don't really understand why we are using this scale...
```

### Leaflet

In recent years Leaflet has become the most popular open source Javascript library for mapping. In comparison to `ggplot()` the advantage of leaflet is its interactivity. It allows you to zoom in, have pop ups, etc. While `ggplot()` is a powerful tool for static maps and would be useful for a book or journal article, leaflet would make a useful addition to an online digital component.

Like `ggplot()` it works by layering information on top of a basemap. You begin by loading the library and invoking leaflet. 
```{r}
library(leaflet)
my.map <- leaflet()
my.map
```
Now that we've got a leaflet object created, we can add layers to it starting with a basemap. 
```{r}
my.map %>% addTiles()
```
Leaflet refers to tiles - these are sort of like base maps. Next we need to add coordinates. In this example, lets use the coordinates for Dr. Regan's office. 
```{r}
my.map %>% addTiles() %>% addMarkers(lng=-82.836856, lat=34.678286, popup = "Hardin 004")
```

We could also do this with a data frame. Notice that in this example, we use the leaflet function and call the data inside rather than passing the function coordinates manually. We then use the paste function to build out text for a pop up.
```{r}
leaflet(data=rec.data.coordinates) %>% addTiles() %>% addMarkers(~longitude, ~latitude, popup = paste("The total expenditures in ", rec.data.coordinates$city, ", ", rec.data.coordinates$state, " were ",  rec.data.coordinates$total_expenditures, sep=""))
```


(@) Use leaflet to map a dataset of your choice: 
```{r}
leaflet(data = bwv.data.coordinates) %>% addTiles() %>% addMarkers(~longitude, ~latitude, popup = paste("Single woman voter"))
```

(@) Explain what choices you made in building this map? Why might you use leaflet over ggplot? When would ggplot be more desirable? 

> I chose the Boston Women Voters data because it consists of a variety of home addresses, which I thought would be interesting to map using leaflet. Using leaflet over ggplot in this situation has some advantages, as since these are addresses, it is interesting to zoom in and examine the area around where the single woman voter lived. The downside to this, in this case, is that this data is over 100 years old and our basemap for leaflet is recent. This means that locations may have experienced major changes over the years. 

*** ADD TO THIS AFTER FIXING BWV MAP FROM EARLIER QUESTION ***


### Exercises
For the next portion of this worksheet you will use some data about national parks that Dr. Barczewski created. Using this data (link below) you should use ggplot (charts, maps) and other mapping tools to come up with several ways to visualize it. You should try to think about this from the perspective of her larger book project, how could you visualize this data to help her make a compelling argument? See the email I send for more details about her project. Pick a dimension and make maps based on it.

```{r}
parks <- read.csv("https://raw.githubusercontent.com/regan008/DigitalMethodsData/main/raw/parks-geocoded.csv")
```

```{r}
world.map <- map_data("world")

ggplot() +
  geom_map(data = world.map, map = world.map, aes(long, lat, map_id = region), fill = "lightgray", color = "black") +
  geom_point(data = parks, aes(x = lon, y = lat)) +
  theme_minimal() # static map 

base.map <- leaflet() %>% addTiles()

leaflet(data = parks) %>% addTiles() %>% addMarkers(~lon, ~lat, popup = paste(parks$park, "established in", parks$year, sep = " "))
```

```{r}
parks.uk.eu <- parks %>%
  filter(country %in% c("United Kingdom", "Albania", "Andorra", "Austria", "Belarus", "Belgium", "Bosnia Herzegovina", "Bulgaria", "Croatia", "Czech Republic", "Denmark", "Estonia", "Finland", "France", "Germany", "Hungary", "Italy", "Kosovo", "Latvia", "Lithuania", "Moldova", "Montenegro", "Netherlands", "North Macedonia", "Norway", "Poland", "Romania", "Serbia", "Slovakia", "Spain", "Sweden", "Switzerland"))

ggplot() +
  geom_map(data = world.map, map = world.map, aes(long, lat, map_id = region), fill = "lightgray", color = "black") +
  geom_point(data = parks.gb.eu, aes(x = lon, y = lat)) +
  theme_minimal()

leaflet(data = parks.gb.eu) %>% addTiles() %>% addMarkers(~lon, ~lat, popup = paste(parks$park, "established in", parks$year, sep = " "))
```

> 
A comparison of British parks to European ones will I think show that they slant older, and that there have not been as many created in recent decades.
I also think that British parks will generally be larger than European ones, and likely closer to urban areas.
I also compiled the total sq km that parks occupy in each country so that this can be compared
I compiled some more specific data on France and Germany as the two most relevant bases for comparison. For France and Germany, I looked at the closest cities of over 1 million. For France I was able to get the population of people who live in each park, so that can be compared as well.
I am eager for your students to suggest other points of comparison, in addition to the best ways to visualize the points above.

```{r}
parks.us.uk <- parks %>% filter(country %in% c("United States", "United Kingdom"))

ggplot() +
  geom_map(data = world.map, map = world.map, aes(long, lat, map_id = region), fill = "lightgray", color = "black") +
  geom_point(data = parks.us.uk, aes(x = lon, y = lat)) +
  theme_minimal()

leaflet(data = parks.us.uk) %>% addTiles() %>% addMarkers(~lon, ~lat, popup = paste(parks$park, "established in", parks$year, sep = " "))
```

> 
I think the data will show that American parks are older, larger and further from urban areas.
See #5 above.

```{r}
parks.uk.ca.nz.sa <- parks %>% filter(country %in% c("United Kingdom", "Canada", "New Zealand", "South Africa"))

ggplot() +
  geom_map(data = world.map, map = world.map, aes(long, lat, map_id = region), fill = "lightgray", color = "black") +
  geom_point(data = parks.uk.ca.nz.sa, aes(x = lon, y = lat)) +
  theme_minimal()

leaflet(data = parks.uk.ca.nz.sa) %>% addTiles() %>% addMarkers(~lon, ~lat, popup = paste(parks$park, "established in", parks$year, sep = " "))
```

> 
I am uncertain as the whether these countries should be compared to Britain collectively (as parts of the former empire) or individually. Canada, for example, might better be combined with America in a "North American" category.
Beyond that, I'm not really sure what the data will show, but the points in 1-3 (age, size, proximity to urban areas) in "Britain vs Europe" above are possibly relevant.
See #5 above.